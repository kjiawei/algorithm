int c_func( char *str) // 定义
{
	int i, sum = 0;
	for( i=0; str[i] != '\0'; i++)
	{
		if(str[i] >= 'a' && str[i] <= 'z')
			sum ++;
	}

	return sum;
}

int b_func( char *str);// 声明 假设这个函数是计算大写字母

int main(void)
{
	char arr[20] = "hello World";
	int (*p)(char *); //（*p）表示定义了指针变量p， 指针指向的是函数（char *） ;函数的返回值为int， 形参为char *
	
	if（某些条件成立）
 		p = &c_func ; 也可以写成 p=c_func
	else
		p = &b_func;

	printf("sum = %d \n" ,p(arr));

}




复合数据类型
struct 
	结构体 由成员构成 
 	表示某个事物的各个方面信息

	描述一个学生信息

	struct info // 结构体info类型， 包含3个成员
	{
		char name [16];
		int age;
		int num;
	};
	

	
	struct info         stu_1;      定义了结构体struct info变量stu_1
	struct info         stu_2;      定义了结构体struct info变量stu_2

	结构体数组
		int   		arr[10]
	     struct info    	arr[10]	

		struct info arr[4] = {
		{10, "zhangsan", 18 , Jan , 99 }, 
		{.num=2,.name="lisi", .age=18 ,.birth=Jan ,.res.phy= 70 }, （建议）
		{.num=3,.name="wangwu", .age=19 ,.birth=May ,.res.art = 90 }, 
			    };
		


	使用：
	 struct info         stu_1; 定义了结构体struct info变量stu_1

	 如果针对结构体变量，用.取它的成员
		strcpy(stu_1.name ,"zhangsan" );
		stu_1.age = 18;
		stu_1.num = 1;
		
		   
	  struct info   * p; 定义了结构体指针struct info *变量p
		1：  p = &stu_1		
			（*p).name  =======>  p->name  先对指针p解引用，再调用其中成员
		-----------------------------------
		 -> 前面必须是个结构体指针变量
		 如果是结构体类型变量，直接使用 .
		-----------------------------------

		2： p指向堆空间中的某地址，该地址指向空间为一个结构体类型大小
		
		 	p = malloc( sizeof(struct info) )


	
	结构体空间大小 （地址对齐以2或者4对齐）
	
	1: int/ long/float  4B  
		要求独占4B (一间房)
	2：char  1B 随便一个位置
	3：short 2B 要求2B （一张床）
	4：double  8B
		 要求独占8B (2间房)	
	5: 如果成员中有4B及以上的类型， 最后的一个成员会用4补齐
	   如果成员中最大占用字节数为2B ，最后一个成员是用2补齐
	   如果成员中最大占用字节数为1B ，直接计算大小

	 
union
	联合体 ，共用体 共同体  
	也表示事物某一个属性,所有成员占用同一个地址，地址空间大小为成员最大字节数
		union  result
		{
			int wenke;
			char like;
		}; -- 4B

	-----------------------------------
	 -> 前面必须是个指针变量
	如果是联合体类型变量，直接使用 .
	-----------------------------------	

enum
	 把整型数统一管理，给各个数字设置了别名

	 enum 枚举名 { , , };   其中枚举名几乎没有使用过
	 仅仅是用枚举中的各个值，表示不同的整数

	 枚举值只是整数的别名，不是变量，不能被赋值，一般适用于switch  case等的条件判断 

 
	 1： 如果有赋值，以该值为准
	 2： 第一个值如果没有赋值， 默认为0
	 3： 非第一个值，默认为前一个值+1




练习：
	创建一个结构体记录以下同学的信息
		学号 姓名 年龄 出生月份 考试成绩
		 其中考试成绩有两类，分别是艺术成绩以及体育成绩，每个同学只能有其中一个成绩
		 出生月份信息要求用枚举管理，如一月为Jan ,二月Feb 
		
	要求记录4个同学的信息

	尝试对结构体数组按照学号进行排序
		
		       #include <string.h>

      			 void *memcpy(void *dest, const void *src, size_t n);




typedef 	
	定义类型，定义某类型别名

	使用方式 ： typedef 已存在类型  别名
	 
		typedef int apple
			新类型apple 表示int类型

			apple i ;    ===== int i;   定义了一个int类型的变量i
		
		typedef struct info  tree
			新类型 tree ,表示struct info 
			 tree b; ====  struct info b; 定义了一个struct info类型的变量b

		typedef int * p ;
			int * p 表示是定义了一个int 指针类型的变量p
			typedef int * p  表示是定义了一个int指针类型 p
			
		
		
		 typedef void (*sighandler_t)(int);
			 void (*sighandler_t)(int);
				函数指针变量sighandler_t，指向的函数是返回值为void， 形参为int
		
			typedef void (*sighandler_t)(int);	
				函数指针类型sighandler_t，指向的函数是返回值为void， 形参为int

			sighandler_t  p  ； p是个函数指针变量，指向的函数是返回值为void， 形参为int

			void (*signal(int sig, void (*func)(int)))(int);
				signal  指针函数指针
				void (*signal(int sig,   void (*func)(int))  )(int);
				void (*signal(int sig,    sighandler_t func   )(int);
				 --> sighandler_t signal（ int sig,  sighandler_t func ）;
			

			
注意：
struct info // 结构体info类型， 包含3个成员
	{
		char name [16];
		int age;
		int num;
	}info; //  变量info ，已经可以直接使用
	

typedef struct info // 结构体info类型， 包含3个成员
	{
		char name [16];
		int age;
		int num;
	}info; // 只是一个类型，表示 struct info结构体，还必须定义变量


------------------------------------------------------------------------------------------------------------------

预处理

	#   在C中表示预处理语句


	编译步骤：	预处理(-E -o)  编译 汇编  链接 


	预处理， 是展开

	1: 宏定义 
		宏定义，适合定义在代码中多次出现的数据
		  #define NUM 99  定义一个宏并设置为99
		  #define DEBUG   定义了一个宏

	
		 a: 可以在代码中设置 #define NUM 99
		 b: 编译的是设置宏  -DNUM=99  

		系统自定义的宏
			__LINE__     %d   行数
			__FILE__	   文件名
			__func__	   函数名
			__DATE__  __TIME__   编译的时间
		
		

	2: 宏判断
		#if 条件 
		{条件成立 才执行}	
		#else 
		{ 条件不成立 执行}
		#endif


		#ifdef 
			宏有定义才执行
		#else 
			宏没有定义才执行
		#endif

		和 以上相反 #ifndef    #else    #endif

		
	3：包含头文件
		#include < >  在系统环境变量PATH中寻找文件
		#include ""   在指定目录或者本路径下寻找文件 


	
	
定义一个宏， 表示一年有多少秒



定义一个宏， 可以得到两数中较小的值


定义一个宏，实现两数交换值
	{ }
	宏操作 要尽可能简短（在调用时候会展开）

函数调用的时候，只是取其地址， 不会增大代码所占空间
	但是例外：内联函数 inline int 函数名（ ） 希望在编译时候就展开函数，这样可以加快运行效率，
		具体这个函数有没有被当成内联函数处理就有系统决定。
		内联函数的地址不可知，类似于宏


作用域
	代码块 {} 中定义局部变量
	函数原型  形参
	文件作用域 全局变量

链接
	外部链接  其它文件可以使用  普通全局变量
	内部链接  在本文件各函数使用    静态全局变量
	空链接    局部变量 、形参


存储期
	静态存储   运行就已经在内存中，数据段中 全局&static局部

	自动存储  栈中 普通局部变量&形参

	动态存储  堆中 malloc/calloc申请的 free



register 寄存器变量 在取寄存器值的时候，有可能变量值已经发生了变化，需要直接取变量地址上的值


具有外部链接的静态变量 是普通全局变量

具有内部链接的静态变量 是静态全局变量

空链接的静态变量   static 局部变量



int arr[10]
arr  == &arr[0]


{
	int *p = (int *) malloc(sizeof(int)*10);//  利用malloc在堆中申请了一段连续空间,空间大小为10*int
						    堆空间的首地址（钥匙）赋给了一个栈中的指针变量p
						    p本身是在栈中，但是p的值是堆地址



	最终堆空间已经不需要使用的时候，一定free掉
	free（p）钥匙不能变
}




作业：1: 如何判断目前平台是大端字节序还是小端字节序
      2 :书上的习题

	









