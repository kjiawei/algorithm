PID是什么？有什么用？怎么实现？应用场景？用C++如何实现?发展及拓展?使用注意问题？
1.控制算法有哪些：二位式控制(弊端：返回值单一 不能达到理想值 延迟 效率低)
pv(控制对象)当前状态值 sv用户设定(目标)值(按钮或上拉电阻传入设定值给到算法,算法输出out去控制负载,负载再将返回值经传感器去到算法)

2.PID如何解决(思想): 偏差E=Sv-Pv 不同:历史偏差(存储器) Pv取样值(开机以来每隔固定时间与Sv相减然后存储,又分为:历史偏差 当前偏差 最近偏差,叠加三次的值然后输出out)

分析:
1.开机以来传感器所有的采样点的数据序列 
序列:x1(第一秒钟值) x2.....xk,
2.分析采样点数据序列,挖掘三方面信息
①Ek =Sv-Xk现在时间点传感器回来值与设定值偏差程度
>0:控制没达标
=0:刚好
<0:超标

POUT = Kp*Ek+OUT0 放大偏差 ----比例控制  PWM(脉冲)信号-侧面控制负载 缺陷:值相等就失控(没误差控制不了)

②Sk = E1+E2+.....Ek-1+Ek  //可正可负
>0:大多数时间未达标    =0:  <0:
IOUT=Kp*Sk+OUT0->积分算法(考虑了历史状态)->+OUT0代表历史没有问题
把问题控制在没有发生之前

③最近两次偏差相减 Dk = E(k)-E(k-1)//最后两个数想减
>0: 偏差更大,越来越偏离目标(趋势)
DOUT = Kp*Dk+OUT0  --微分控制(不能单独行动)

形成:



原理